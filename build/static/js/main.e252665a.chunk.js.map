{"version":3,"sources":["components/AuthContainer.tsx","components/PlayerContainer.tsx","App.tsx","constants.ts","index.tsx"],"names":["AuthContainer","slackAuthUrl","href","Container","styled","div","User","UserAvatar","img","UserInfo","UserName","span","BroadcastingButton","button","BroadcastStatus","isLive","CurrentlyPlaying","TrackName","ArtistName","PlayerContainer","currentlyPlayingTrack","playerPreferences","userData","ipcRenderer","src","userAvatar","alt","userId","userName","teamName","onClick","send","type","isIncognito","title","artist","electron","window","require","remote","App","useState","isUserAuthenticated","setIsUserAuthenticated","setCurrentlyPlayingTrack","setPlayerPreferences","teamId","setUserData","scopes","join","useEffect","isElectron","on","e","body","className","style","backgroundColor","console","log","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAMaA,EAAgB,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,aAC9B,OACE,6BACE,8DACA,uBAAGC,KAAMD,GAAT,0B,opDCEN,IAAME,EAAYC,IAAOC,IAAV,KASTC,EAAOF,IAAOC,IAAV,KAOJE,EAAaH,IAAOI,IAAV,KAMVC,EAAWL,IAAOC,IAAV,KAMRK,EAAWN,IAAOO,KAAV,KAIRC,EAAqBR,IAAOS,OAAV,KAWlBC,EAAkBV,IAAOO,KAAV,KAMC,qBAAGI,OAA4C,QAAU,SAGzEC,EAAmBZ,IAAOC,IAAV,KAUhBY,EAAYb,IAAOC,IAAV,KAOTa,EAAad,IAAOC,IAAV,KAIHc,EAAkB,SAAC,GAKU,IAJxCC,EAIuC,EAJvCA,sBACAC,EAGuC,EAHvCA,kBACAC,EAEuC,EAFvCA,SACAC,EACuC,EADvCA,YAMA,OACE,kBAACpB,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,CAAYiB,IAAKF,EAASG,WAAYC,IAAKJ,EAASK,SACpD,kBAAClB,EAAD,KACE,kBAACC,EAAD,KAAWY,EAASM,UACpB,8BAAON,EAASO,UAChB,kBAACjB,EAAD,CAAoBkB,QAXR,WAClBP,EAAYQ,KAAK,kBAAmB,CAAEC,KAAM,uBAWpC,kBAAClB,EAAD,CAAiBC,QAASM,EAAkBY,cAC3CZ,EAAkBY,YAAc,MAAQ,OAF3C,mBAOHb,GACC,kBAACJ,EAAD,KACE,kBAACC,EAAD,KAAYG,EAAsBc,OAClC,kBAAChB,EAAD,KAAaE,EAAsBe,WC1GvCC,EAAWC,OAAOC,QAAQ,YAE1Bf,GADKa,EAASG,OAAOD,QAAQ,MACfF,EAASb,aA2DdiB,MAzDf,WAAgB,IAAD,EACyCC,oBAAS,GADlD,mBACNC,EADM,KACeC,EADf,OAE6CF,mBAAuB,CAC/EP,MAAO,GACPC,OAAQ,KAJG,mBAENf,EAFM,KAEiBwB,EAFjB,OAMqCH,mBAA4B,CAC5ER,aAAa,IAPF,mBAMNZ,EANM,KAMawB,EANb,OASmBJ,mBAAwB,CACtDd,OAAQ,GACRmB,OAAQ,GACRjB,SAAU,GACVD,SAAU,GACVH,WAAY,KAdD,mBASNH,EATM,KASIyB,EATJ,KAiBPC,EAAS,CAAC,sBAAuB,cAAcC,KAAK,KACpDhD,EAAY,sDC5BqB,8BD4BrB,kBAAqF+C,EAArF,yBC3BwB,yBDkD1C,OArBAE,qBAAU,WACJC,QACF5B,EAAYQ,KAAK,kBAAmB,CAAEC,KAAM,SAC5CT,EAAYQ,KAAK,kBAAmB,CAAEC,KAAM,sBAC5CT,EAAYQ,KAAK,kBAAmB,CAAEC,KAAM,uBAC5CT,EAAYQ,KAAK,kBAAmB,CAAEC,KAAM,cAE5CT,EAAY6B,GAAG,qBAAqB,SAACC,EAAD,GAAsC,IAA3BrB,EAA0B,EAA1BA,KAAMsB,EAAoB,EAApBA,KACtC,SAATtB,EACFW,EAAuBW,GACL,sBAATtB,EACTY,EAAyBU,GACP,uBAATtB,EACTa,EAAqBS,GACH,cAATtB,GACTe,EAAYO,SAIjB,IAGD,yBAAKC,UAAU,MAAMC,MAAO,CAAEC,gBAAiB,YAC5Cf,EACC,kBAAC,EAAD,CACEtB,sBAAuBA,EACvBC,kBAAmBA,EACnBC,SAAUA,EACVC,YAAaA,IAGf,kBAAC,EAAD,CAAetB,aAAcA,MExDrCyD,QAAQC,IAAIC,oHAEZC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.e252665a.chunk.js","sourcesContent":["import React from 'react';\n\ninterface AuthContainerProps {\n  slackAuthUrl: string;\n}\n\nexport const AuthContainer = ({ slackAuthUrl }: AuthContainerProps): JSX.Element => {\n  return (\n    <div>\n      <h2>You need to sign in with Slack</h2>\n      <a href={slackAuthUrl}>Authorize with Slack</a>\n    </div>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { PlayerPreferences, SlackUserData, SpotifyTrack } from '../../electron/types';\n\ninterface PlayerContainerProps {\n  currentlyPlayingTrack: SpotifyTrack;\n  playerPreferences: PlayerPreferences;\n  userData: SlackUserData;\n  ipcRenderer: any;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #070518;\n  color: white;\n  font-family: 'Lato', sans-serif;\n  height: 100vh;\n`;\n\nconst User = styled.div`\n  margin: 10%;\n  display: flex;\n  flex-direction: row;\n  height: 50vh;\n`;\n\nconst UserAvatar = styled.img`\n  height: 60px;\n  width: 60px;\n  border-radius: 15px;\n`;\n\nconst UserInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 5%;\n`;\n\nconst UserName = styled.span`\n  font-weight: 700;\n`;\n\nconst BroadcastingButton = styled.button`\n  margin-top: 10px;\n  background-color: #272637;\n  border: none;\n  color: white;\n  padding: 2%;\n  width: 200px;\n  border-radius: 5px;\n  font-family: 'Lato', sans-serif;\n`;\n\nconst BroadcastStatus = styled.span`\n  height: 10px;\n  width: 10px;\n  border-radius: 50%;\n  display: inline-block;\n  margin-right: 10px;\n  background-color: ${({ isLive }: { isLive: boolean }) => (isLive ? 'green' : 'red')};\n`;\n\nconst CurrentlyPlaying = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 50vh;\n  background-color: #4038dd;\n  border-radius: 15px 15px 0px 0px;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst TrackName = styled.div`\n  font-weight: 700;\n  font-size: 1.2em;\n  text-align: center;\n  margin-bottom: 5px;\n`;\n\nconst ArtistName = styled.div`\n  font-size: 1em;\n`;\n\nexport const PlayerContainer = ({\n  currentlyPlayingTrack,\n  playerPreferences,\n  userData,\n  ipcRenderer\n}: PlayerContainerProps): JSX.Element => {\n  const handleClick = () => {\n    ipcRenderer.send('message-to-main', { type: 'TOGGLE_INCOGNITO' });\n  };\n\n  return (\n    <Container>\n      <User>\n        <UserAvatar src={userData.userAvatar} alt={userData.userId} />\n        <UserInfo>\n          <UserName>{userData.userName}</UserName>\n          <span>{userData.teamName}</span>\n          <BroadcastingButton onClick={handleClick}>\n            <BroadcastStatus isLive={!playerPreferences.isIncognito} />\n            {playerPreferences.isIncognito ? 'Not' : 'Live'} Broadcasting\n          </BroadcastingButton>\n        </UserInfo>\n      </User>\n\n      {currentlyPlayingTrack && (\n        <CurrentlyPlaying>\n          <TrackName>{currentlyPlayingTrack.title}</TrackName>\n          <ArtistName>{currentlyPlayingTrack.artist}</ArtistName>\n        </CurrentlyPlaying>\n      )}\n    </Container>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport isElectron from 'is-electron';\nimport { Message, PlayerPreferences, SlackUserData, SpotifyTrack } from '../electron/types';\nimport { AuthContainer, PlayerContainer } from './components';\nimport { REACT_APP_SLACK_CLIENT_ID, REACT_APP_SLACK_REDIRECT_URI } from './constants';\n\nconst electron = window.require('electron');\nconst fs = electron.remote.require('fs');\nconst ipcRenderer = electron.ipcRenderer;\n\nfunction App() {\n  const [isUserAuthenticated, setIsUserAuthenticated] = useState(false);\n  const [currentlyPlayingTrack, setCurrentlyPlayingTrack] = useState<SpotifyTrack>({\n    title: '',\n    artist: ''\n  });\n  const [playerPreferences, setPlayerPreferences] = useState<PlayerPreferences>({\n    isIncognito: false\n  });\n  const [userData, setUserData] = useState<SlackUserData>({\n    userId: '',\n    teamId: '',\n    teamName: '',\n    userName: '',\n    userAvatar: ''\n  });\n\n  const scopes = ['users.profile:write', 'users:read'].join(' ');\n  const slackAuthUrl = `https://slack.com/oauth/authorize?client_id=${REACT_APP_SLACK_CLIENT_ID}&scope=${scopes}&redirect_uri=${REACT_APP_SLACK_REDIRECT_URI}`;\n\n  useEffect(() => {\n    if (isElectron()) {\n      ipcRenderer.send('message-to-main', { type: 'AUTH' });\n      ipcRenderer.send('message-to-main', { type: 'CURRENTLY_PLAYING' });\n      ipcRenderer.send('message-to-main', { type: 'PLAYER_PREFERENCES' });\n      ipcRenderer.send('message-to-main', { type: 'USER_DATA' });\n\n      ipcRenderer.on('message-from-main', (e: any, { type, body }: Message) => {\n        if (type === 'AUTH') {\n          setIsUserAuthenticated(body);\n        } else if (type === 'CURRENTLY_PLAYING') {\n          setCurrentlyPlayingTrack(body);\n        } else if (type === 'PLAYER_PREFERENCES') {\n          setPlayerPreferences(body);\n        } else if (type === 'USER_DATA') {\n          setUserData(body);\n        }\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"App\" style={{ backgroundColor: '#070518' }}>\n      {isUserAuthenticated ? (\n        <PlayerContainer\n          currentlyPlayingTrack={currentlyPlayingTrack}\n          playerPreferences={playerPreferences}\n          userData={userData}\n          ipcRenderer={ipcRenderer}\n        />\n      ) : (\n        <AuthContainer slackAuthUrl={slackAuthUrl} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","export const REACT_APP_SLACK_CLIENT_ID = '1182059129521.1447672242117';\nexport const REACT_APP_SLACK_REDIRECT_URI = 'http://localhost:3000';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconsole.log(process.env);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}